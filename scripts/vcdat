#!/usr/bin/env python

from subprocess import Popen, PIPE
import time
import requests
import sys
import tempfile
import os
import argparse

def isBound(port):
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.bind(("localhost", int(port)))
    except socket.error as e:
        return True
    s.close()
    return False

def getPort(env_name, start_port): # string, int
    env_port = os.environ.get(env_name)
    if(env_port != None):
        if(isBound(env_port)):
            print("{env_name} was set, but the port could not be bound. Searching for an open port automatically.")
        else:
            return env_port
    for i in range(0, 30):
        port = int(start_port) + i
        if(not isBound(port)):
            return str(port)
    raise RuntimeError(
        "Failed to find an open port. Please set the %s environment variable to an open port." %
        env_name)


os.environ["CDAT_ANONYMOUS_LOG"] = "no"

parser = argparse.ArgumentParser()
parser.add_argument("--print-log", help="Output to screen instead of log file", action='store_true') # Because i cant do --print for whatever reason.
parser.add_argument("--vcs_server_port", help="port for vcs server", type=int, default=5000)
parser.add_argument("--port", help="port for jupyterlab", type=int, default=8888)

args = parser.parse_args()
VCSJS_PORT = getPort("VCSJS_PORT", args.vcs_server_port)
VCDAT_PORT = getPort("VCDAT_PORT", args.port)

os.environ["VCSJS_PORT"] = "{}".format(VCSJS_PORT)

if(args.print_log):
    logfile = sys.stdout
else:
    try:
        logfile = open(os.path.join(tempfile.gettempdir(), "vcdat.log"), 'w+')
    except IOError:
        print("Unable to write to temp file directory. Falling back to standard out for logs")
        logfile = sys.stdout

print("Logs are going to:", logfile.name)

print("Starting VCSJS on PORT:", VCSJS_PORT)
vcs_server = Popen(
    ["vcs-server", "-p", VCSJS_PORT], stdout=logfile, stderr=logfile)
time.sleep(3)
print("Starting jupyter-lab on PORT:", VCDAT_PORT)
jupyterlab_server = Popen(
    ["jupyter-lab", "--port", "{}".format(VCDAT_PORT)], stdout=PIPE, stderr=PIPE)

# Now we'll wait till the user terminates the process.
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print("")

vcs_server.terminate()
jupyterlab_server.terminate()